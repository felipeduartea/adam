// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Profile table references Supabase auth.users
// This is your "public" user data that you can extend
model Profile {
  id         String    @id @db.Uuid // References auth.users(id)
  email      String?
  name       String?
  avatarUrl  String?   @map("avatar_url")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  posts      Post[]
  memberships OrganizationMembership[]

  @@map("profiles")
}

model Organization {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  slug        String    @unique
  description String?
  avatarUrl   String?   @map("avatar_url")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  memberships OrganizationMembership[]
  posts       Post[]

  @@map("organizations")
}

model OrganizationMembership {
  id             String       @id @default(uuid()) @db.Uuid
  userId         String       @map("user_id") @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  role           String       @default("member") // owner, admin, member
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  user           Profile      @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@map("organization_memberships")
}

model Post {
  id             Int       @id @default(autoincrement())
  title          String
  content        String?
  userId         String    @map("user_id") @db.Uuid
  organizationId String?   @map("organization_id") @db.Uuid
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  user           Profile       @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@map("posts")
}

model VectorText {
  id             Int                       @id @default(autoincrement())
  filePath       String                    @map("file_path")
  chunkContent   String                    @map("chunk_content")
  functionName   String?                   @map("function_name")
  className      String?                   @map("class_name")
  language       String
  chunkType      String                    @map("chunk_type")
  lineStart      Int                       @map("line_start")
  lineEnd        Int                       @map("line_end")
  embedding      Unsupported("vector(1536)")
  metadata       Json?
  createdAt      DateTime                  @default(now()) @map("created_at")

  @@map("vector_text")
}
